"Common.OK" = "OK";
"Common.Exit" = "Exit";
"Common.Browse" = "Browse";

"MandatoryCmdCheck.Alert.ErrorMessage" = "Mandatory command error!";
"MandatoryCmdCheck.Alert.ErrorInfoFrmt" = "Unable to launch command: %@";

"MainView.Certificate" = "Certificate";
"MainView.ProvProfile" = "Provisioning profile";
"MainView.ProvProfilePlaceholder" = "Browse or drag Provisioning profile (*. mobileprovision)";
"MainView.IPAFile" = "IPA File";
"MainView.IPAFilePlaceholder" = "Browse or drag IPA file (*.ipa)";
"MainView.Sign" = "Sign";
"MainView.EntUpdate" = "Force Entitlements Update";
"MainView.EntUpdateHelpFrmt" = "When \"%@\" is checked, application entitlements are updated with loaded prov. profile entitlements even if application identifiers are matching, use this option when prov. profile for this application is updated with different entitlements.\
\
Note: If application identifiers are not matching (i.e. when prov. profile have asterisk (*) application identifier with different prefix) or entitlements are not found in application bundle, entitlements will always be updated or created. This may result that updated or created entitlements are different from entitlements that application needs and some features may be lost (i.e. keychain groups for shared keychain) which can produce bugs or crashing application.";
"MainView.Log" = "Log";
"MainView.Alert.SignSuccessMessage" = "IPA signed successfully!";
"MainView.Alert.SignSuccessInfo" = "Unable to save new ipa file, please choose destination directory.";
"MainView.Alert.SignErrorMessage" = "Unable to sign ipa!";
"MainView.Alert.SignErrorInfo" = "Check log.";
"MainView.Alert.ProvProfileErrorMessage" = "Error loading provisioning profile!";
"MainView.Alert.ProvProfileErrorInfo" = "Check log.";

"ProvProfileParser.Log.Start" = "LOADING PROVISIONONG PROFILE...";
"ProvProfileParser.Log.Invalid" = "ERROR: Invalid provisioning profile file!";
"ProvProfileParser.Log.Found" = "- Found profile.";
"ProvProfileParser.Log.ErrorAppID" = "ERROR: Invalid provisioning profile file! Application identifier prefix is invalid or not exist.";
"ProvProfileParser.Log.ErrorCerts" = "ERROR: Invalid provisioning profile file! Certificates are invalid or not exist.";
"ProvProfileParser.Log.ErrorEnt" = "ERROR: Invalid provisioning profile file! Entitlements are invalid or not exist.";
"ProvProfileParser.Log.ErrorName" = "ERROR: Invalid provisioning profile file! Name is invalid or not exist.";
"ProvProfileParser.Log.ErrorTeamID" = "ERROR: Invalid provisioning profile file! Team identifier is invalid or not exist.";
"ProvProfileParser.Log.OKFrmt" = "\tOK: Using profile %@";
"ProvProfileParser.Log.Done" = "DONE.\n";

"CertificatesLoader.Log.Start" = "LOADING PROFILE CERTIFICATES...";
"CertificatesLoader.Log.ErrorCertsNotFound" = "- ERROR: No certificates found in keychain, aborting...";
"CertificatesLoader.Log.ErrorInvalid" = "- ERROR: Invalid certificate found, skipping...";
"CertificatesLoader.Log.Found" = "- Certificate found.";
"CertificatesLoader.Log.ErrorName" = "\tERROR: Invalid certificate! Name not found, skipping...";
"CertificatesLoader.Log.CertNameFrmt" = "\tCertificate name: %@";
"CertificatesLoader.Log.ErrorSerial" = "\tERROR: Invalid certificate! Serial not found, skipping...";
"CertificatesLoader.Log.ErrorNotFound" = "\tERROR: Certificate not found in keychain, skipping...";
"CertificatesLoader.Log.OK" = "\tOK: Certificate found in keychain, adding to list.";
"CertificatesLoader.Log.ErrorNoAvailCert" = "- ERROR: No avaiable certificate found in keychain, discarding provisioning profile!";
"CertificatesLoader.Log.Done" = "DONE.\n";

"ProcessAndSign.Log.Start" = "SIGNING...";
"ProcessAndSign.Log.SetupTmp" = "- Setting up temporary directory.";
"ProcessAndSign.Log.ErrorSetupTmp" = "\tERROR: Unable to create temporary directory, aborting!";
"ProcessAndSign.Log.ErrorOpenTmp" = "\tERROR: Unable to open temporary directory, aborting!";
"ProcessAndSign.Log.OKTmp" = "\tOK";
"ProcessAndSign.Log.ExtIPA" = "- Extracting IPA file.";
"ProcessAndSign.Log.ErrorCopyExtIPA" = "\tERROR: Unable to copy IPA file into temporary directory, aborting!";
"ProcessAndSign.Log.ErrorEndedExtIPA" = "\tERROR: Extract ended unexpectedly, aborting!";
"ProcessAndSign.Log.ErrorInvalidExtIPAFrmt" = "\tERROR: Failed with unzip status %d. Invalid IPA file, aborting!";
"ProcessAndSign.Log.ErrorMemoryExtIPAFrmt" = "\tERROR: Failed with unzip status %d. Not enough memory, aborting!";
"ProcessAndSign.Log.ErrorDiskExtIPAFrmt" = "\tERROR: Failed with unzip status %d. Not enough disk space, aborting!";
"ProcessAndSign.Log.ErrorFailedExtIPAFrmt" = "\tERROR: Failed with unzip status %d, aborting!";
"ProcessAndSign.Log.OKExtIPA" = "\tOK";
"ProcessAndSign.Log.ChkIPA" = "- Checking IPA.";
"ProcessAndSign.Log.ErrorBundleDirChkIPAFrmt" = "\tERROR: Invalid IPA content. Unable to find application bundle directory (%@/*.%@), aborting!";
"ProcessAndSign.Log.ErrorInfoPlistChkIPAFrmt" = "\tERROR: Invalid IPA content. Unable to load \"%@\" file, aborting!";
"ProcessAndSign.Log.ErrorAppExecChkIPAFrmt" = "\tERROR: Invalid IPA content. Unable to application executable \"%@\" in application bundle, aborting!";
"ProcessAndSign.Log.OKChkIPAFrmt" = "\tOK";
"ProcessAndSign.Log.RemSigDirs" = "- Removing all signature directories.";
"ProcessAndSign.Log.OKFoundRemSigDirsFrmt" = "\tOK: %lu removed.";
"ProcessAndSign.Log.OKNotFoundRemSigDirs" = "\tOK: None found.";
"ProcessAndSign.Log.EmbProvCopy" = "- Copying embedded provisioning profile into application bundle directory.";
"ProcessAndSign.Log.ErrorEmbProvCopyFrmt" = "\tERROR: Unable to copy file \"%@\", aborting!";
"ProcessAndSign.Log.OKEmbProvCopy" = "\tOK";
"ProcessAndSign.Log.SetupEnts" = "- Setting up application entitlements.";
"ProcessAndSign.Log.NewSetupEntsFrmt" = "\tEntitlements file not found, creating new \"%@\"";
"ProcessAndSign.Log.FoundMatchSetupEnts" = "\tFound matching application identifier in current entitlements, not updating entitlements.";
"ProcessAndSign.Log.ErrorBundleIDSetupEntsFrmt" = "\tERROR: Unable to find bundle identifier in \"%@\" file, aborting!";
"ProcessAndSign.Log.OKSetupEnts" = "\tOK";
"ProcessAndSign.Log.FindSignLibs" = "- Finding and signing frameworks and dynamic libraries.";
"ProcessAndSign.Log.SigningFindSignLibsFrmt" = "\tSigning: %@";
"ProcessAndSign.Log.ErrorFindSignLibs" = "\tERROR: Signing failed, aborting!";
"ProcessAndSign.Log.OKFindSignLibs" = "\tOK";
"ProcessAndSign.Log.OKNotFoundFindSignLibs" = "\tOK: None found.";
"ProcessAndSign.Log.FindSignExts" = "- Finding, setting up entitlements and signing application extensions.";
"ProcessAndSign.Log.SetupFindSignExtsFrmt" = "\tSetting up entitlements for extension: %@";
"ProcessAndSign.Log.ErrorSetupFindSignExts" = "\tERROR: Setting up extension entitlements failed, aborting!";
"ProcessAndSign.Log.SigningFindSignExtsFrmt" = "\tSigning extension: %@";
"ProcessAndSign.Log.ErrorSigningFindSignExts" = "\tERROR: Signing failed, aborting!";
"ProcessAndSign.Log.OKFindSignExts" = "\tOK";
"ProcessAndSign.Log.OKNotFoundFindSignExts" = "\tOK: None found.";
"ProcessAndSign.Log.FindSignBins" = "- Finding and signing other application binaries.";
"ProcessAndSign.Log.SigningFindSignBinsFrmt" = "\tSigning binary: %@";
"ProcessAndSign.Log.ErrorSigningFindSignBins" = "\tERROR: Signing failed, aborting!";
"ProcessAndSign.Log.OKFindSignBins" = "\tOK";
"ProcessAndSign.Log.OKNotFoundFindSignBins" = "\tOK: None found.";
"ProcessAndSign.Log.SignApp" = "- Signing application bundle.";
"ProcessAndSign.Log.ErrorSignApp" = "\tERROR: Signing failed, aborting!";
"ProcessAndSign.Log.OKSignApp" = "\tOK";
"ProcessAndSign.Log.FixExecPerm" = "- Fixing application executable permissions.";
"ProcessAndSign.Log.OKFixExecPerm" = "\tOK";
"ProcessAndSign.Log.CreatingIPA" = "- Creating signed IPA file.";
"ProcessAndSign.Log.ErrorEndedCreatingIPA" = "\tERROR: Creating file ended unexpectedly, aborting!";
"ProcessAndSign.Log.ErrorMemoryCreatingIPAFrmt" = "\tERROR: Failed with zip status %d. Not enough memory, aborting!";
"ProcessAndSign.Log.ErrorDiskCreatingIPAFrmt" = "\tERROR: Failed with zip status %d. Not enough disk space, aborting!";
"ProcessAndSign.Log.ErrorFailedCreatingIPAFrmt" = "\tERROR: Failed with zip status %d, aborting!";
"ProcessAndSign.Log.OKNoSaveCreatingIPA" = "\tOK: Unable to save into source directory.";
"ProcessAndSign.Log.OKSavedCreatingIPA" = "\tOK: Saved into source directory.";
"ProcessAndSign.Log.Done" = "DONE.\n";
